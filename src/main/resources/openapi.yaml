openapi: 3.0.0
info:
  description: This is the market place's products microservice. This microservice handles any
    actions related to products
  version: 1.0.0
  title: Market Place Products
  contact:
    name: Vanderson Assis
    email: assis.vanderson@gmail.com
paths:
  /products:
    post:
      tags:
        - Products
      summary: Creates a new product
      description: The product passed will be saved in the database
      operationId: saveProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        description: Product object that will be added to our database
        required: true
      responses:
        "201":
          description: The product just created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid data object
        "405":
          description: Validation exception
        "500":
          description: Internal server error
    put:
      tags:
        - Products
      summary: Updates an existing product
      description: The product will be updated in the database
      operationId: updateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        description: Product object that will be updated in our database
        required: true
      responses:
        "404":
          description: Product not found
        "405":
          description: Validation exception
        "500":
          description: Internal server error
  "/products/{idProduct}":
    delete:
      tags:
        - Products
      summary: Deletes a product document
      description: The product that contains the parameter id will be deleted
      operationId: deleteProduct
      parameters:
        - in: path
          name: idProduct
          required: true
          description: Id of the product to be deleted
          schema:
            type: string
      responses:
        "204":
          description: The product has been deleted
        "404":
          description: Product not found
        "500":
          description: Internal server error
  "/products/{idSeller}/seller":
    get:
      tags:
        - Products
      summary: List all the products in our market place for the selected seller
      description: This endpoint will return all the products we have registered in our
        database
      operationId: listProductsBySeller
      parameters:
        - in: path
          name: idSeller
          required: true
          description: The seller's id to return its products
          schema:
            type: string
      responses:
        "200":
          description: Products response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
        "401":
          description: Authorization failed
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      tags:
        - Products
      summary: Deletes all the seller's products
      description: All the products belonging to the seller passed as parameter
      operationId: deleteProducts
      parameters:
        - in: path
          name: idSeller
          required: true
          description: Seller's id which will have all its products deleted
          schema:
            type: string
      responses:
        "204":
          description: All the products belonging to this seller was deleted successfully
        "404":
          description: Seller not found
        "500":
          description: Internal server error
  "/products/lock":
    post:
      tags:
        - Products Lock Toggle
      summary: Locks the quantity of products sent in the payload
      description: If enough products for the quantity in the payload, they will be locked, so the order can go on. If the order fails, the locked products will be
        unlocked to be sold to another customer.
      operationId: lockProductQuantity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductLock"
        description: The product lock toggle object containing the product id and quantity to be locked.
        required: true
      responses:
        "200":
          description: The product's quantity has been locked and can be safely ordered. The lock id will be returned in the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductLock"
        "400":
          description: This status code will be returned if the quantity passed is greater then the available or
            if the request is malformed. Either way, there will be a descriptive message and internal code to why the error
            happened.
        "401":
          description: The client is not authorized to access this endpoint
        "500":
          description: Something went wrong in the server side. The client can't do anything about it and should report the error to the system administrator.
  "/products/{idLock}/lock":
    parameters:
      - in: path
        name: idLock
        required: true
        description: The lock's id to return its lock
        schema:
          type: string
    get:
      tags:
        - Products Lock Toggle
      summary: Returns a lock
      description: Returns a lock for the passed lock id. A product lock is a relation of product and quantity ordered by a customer
      operationId: getProductLock
      responses:
        "200":
          description: Lock response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductLock"
        "401":
          description: Authorization failed
        "404":
          description: Lock not found for the passed id
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      tags:
        - Products Lock Toggle
      summary: Deletes a product lock document
      description: The product lock that contains the parameter id will be deleted
      operationId: deleteLock
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Product lock not found
  "/products/unlock":
    post:
      tags:
        - Products Lock Toggle
      summary: Unlocks the quantity of products sent in the payload
      description: Unlocks the previously locked product quantity. This unlock endpoint is normally called when the products has been locked for selling, but the customer's payment has not been authorized.
      operationId: unlockProductQuantity
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: 5da654e8a4780523fbb
        description: The lockId of the collection's document to be unlocked
        required: true
      responses:
        "200":
          description: The product's quantity has been unlocked succesfully and can be ordered again
        "400":
          description: Malformed request
        "401":
          description: The client is not authorized to access this endpoint
        "404":
          description: The locked document for the provided id was not found
        "500":
          description: Something went wrong in the server side. The client can't do anything about it and should report the error to the system administrator.
servers:
  - url: http://localhost/market-place/api/v1
components:
  schemas:
    Product:
      type: object
      required:
        - idSeller
        - name
        - model
        - description
        - price
        - quantity
      properties:
        id:
          type: string
        idSeller:
          type: string
        name:
          type: string
        model:
          type: string
        description:
          type: string
        price:
          type: number
          minimum: 0.01
        quantity:
          type: integer
          format: int32
    ProductListResponse:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    ProductLock:
      type: object
      required:
        - idProduct
        - quantity
        - orderStatus
      properties:
        lockId:
          type: string
        idProduct:
          type: string
        quantity:
          type: integer
          format: int32
        orderStatus:
          type: string
          enum:
            - PENDING
            - PROCESSING
            - PAYMENT_NOT_AUTHORIZED
            - FINISHED
          default:
            PENDING
    Seller:
      type: object
      properties:
        id:
          type: string
        name:
          type: string